powershell is not an exe, it is a dll.

on new machines, make sure to run update-help -force -Erroraction (followed by one of 6 choses)

there is also get-help. (man is an Ailias)

get-service is very good too.

get-childitem  -path C:\ -recurse -filter *.pf -name
gci -rec C:\Windows\System32\drivers\etc -filt *.pf -na --> the shorter names are accepted by powershell so long as the shorthand actually solo's out the remaining cmd. rec is recurse while re is ReadOnly


#switch paramiters
#they are boolians:
#-on
#--or off
#---nothing else. these are off unless made otherwise.
-recurse --> this is a switch paramiter.

positional paramiters
optional to the call, they look at strings,
get-childitem C:\ -recurse -filter *.pf -name --> runs the same as the other up there
get-childitem -recurse -filter *.pf -name C:\ --> same
get-childitem -recurse -filter *.pf C:\ -name --> this also prints the same things to the scren.

get-service -name power,Dnscache


Activity Three
VARIABLES --> these are things that are named and stored in a memory location

      Python Bash  PowSh
init | var | var  | $var
call | var | $var | $var

Needs to Know
$Args --> contains an array of values undeclared variables
$input --> an enumerator that enumerates all input that is passed to a function
$_ --> same as $PSItem contains the current object in the pipeline
$PROFILE --> Contains the full path of the PowerShell profile for the current user and the current host application.
$null --> a null object. the void... it is nothing, asigning another variable to '=' null would wipe/clean a variable

Environmental variables:
$env:<variable-name> --> $env: looks for environmetal variables.

$number = 61742
$nospaces="death" 

('spaces don't 'matter')

$number - 1

$var,$var2 = 65535, -1     <--    <---------<

(variables can be listed in one line ^^^^^)

$var1,$var2,Var3 = 65535
$var1
>> 65535
$var2
>>
$var3
>>

$Var1 = $Var2 = $Var3 = 65535 (makes all the Variables the same thing)


get-variable var1 --> OMIT the $ when useing get-variable.or it will break


**ARRAYS!!!**
<#an array is a list that you can itterate through#>


$array=@() <#this array is empty, it is comparable to null#>
$number_arr= 4,5,6
[array]$blank_array=$null <#this array needs a value, "" <-- works too. it is NOT empty#>

<#to add#>
$array += "empty like my mind"

#$x = "Husbando for life"
#$x -is [array] --> not an array
#$x -is [string] --> not a string


$poly_arr = (get-computerinfo), "help me!", 547098

$poly_arr[1] #counts by index

$poly_arr | Select_Object -index 2
$seq_num= 4..50
$seq_num[-1] 
$seq_num[$seq_num.length-1] #length could be count too
$seq_num[1,2,20,39,22]

----------------------------------------------------------------
#Nested array
{!,@,{1,2,3},#}
<#
#human veiw
!,$Null,$Null,
@,$Null,$Null,
1,    2,    3,
#,$Null,$Null
#>

$nested[2] = 1,2,3
$nested[2][1] = 2

$nested[3][1] = $error

--------------------------------------
#Multi dimentional NESTED ARRAY
{Tri, Square,{!,@,{1,2,3},#},cir}

human veiw

tri, $null
Square,
@     , !, 1, #
           2,
           3,
cir

$multi[2] = @,!,{1,2,3}, #
$multi[2][2] = 1,2,3
$multi[2][2][1] = 2

$multi[1][2][3] = $error















