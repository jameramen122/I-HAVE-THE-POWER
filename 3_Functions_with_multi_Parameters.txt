#3_Create_Funtion_with_Multiple_Parameters
New-Alias -Name wh -Value Write-Host

Function Pause {
   $Message = "Press any key to continue..."
   # Check if running in PowerShell ISE
   
   if ($psISE) {
      # "ReadKey" not supported in PowerShell ISE.
      # Show MessageBox UI
      $Shell = New-Object -ComObject "WScript.Shell"
      $Button = $Shell.Popup("Click 'OK' to continue.", 0, "$null", 0)
      Return
   }
 
   $Ignore =
      16,  # Shift (left or right)
      17,  # Ctrl (left or right)
      18,  # Alt (left or right)
      20,  # Caps lock
      91,  # Windows key (left)
      92,  # Windows key (right)
      93,  # Menu key
      144, # Num lock
      145, # Scroll lock
      166, # Back
      167, # Forward
      168, # Refresh
      169, # Stop
      170, # Search
      171, # Favorites
      172, # Start/Home
      173, # Mute
      174, # Volume Down
      175, # Volume Up
      176, # Next Track
      177, # Previous Track
      178, # Stop Media
      179, # Play
      180, # Mail
      181, # Select Media
      182, # Application 1
      183  # Application 2
 
   #Write-Host -NoNewline $Message
   While ($KeyInfo.VirtualKeyCode -Eq $Null -Or $Ignore -Contains $KeyInfo.VirtualKeyCode) {
      $KeyInfo = $Host.UI.RawUI.ReadKey("NoEcho, IncludeKeyDown")
   }
}

Function line {
wh $null
wh '-------------------------------------------------------------------||'
wh $null
}

Function Split {
pause | Out-Null
line
}
Clear-Host

#Function with Parameter Syntax
invoke-expression @"
wh $null
wh "To declare/create a function with an Parameter to pass, heres the syntax:"
wh "function" -ForegroundColor Green -NoNewline
wh " <function name> " -ForegroundColor Gray -NoNewline
wh "(" -ForegroundColor Cyan -NoNewLine
wh "$<Parameter1>,$<Parameter2>" -ForegroundColor Red -NoNewLine
wh ") " -ForegroundColor Cyan -NoNewLine
wh "{" -ForegroundColor Cyan -NoNewline
wh " <function code goes here> " -NoNewline
wh "}" -ForegroundColor Cyan
wh $null
wh "#Note: The Parameters you are passing WILL be seperate variables when passed to the function,
       therefore we must seperate each variable with comma (,) when creating the function"
"@

split

# Creating a Function with Parameter Demo
invoke-expression @"
wh $null
wh "Here's an example of an Parameter being pass to a function:"
wh "function" -ForegroundColor Green -NoNewline
wh " Many-Params " -ForegroundColor Gray -NoNewline
wh "(" -ForegroundColor Cyan -NoNewLine
wh '`$value1,`$value2' -ForegroundColor Red -NoNewLine
wh ") " -ForegroundColor Cyan -NoNewLine
wh "{" -ForegroundColor Cyan -NoNewline
wh $null
wh '    if (`$value1 -gt `$value2) {'
wh '        Write-Host "`$value1" -ForegroundColor Green -NoNewLine'
wh '        Write-Host " is bigger than " -nonewline'
wh '        Write-Host "`$value2" -ForegroundColor Red -NoNewLine'
wh '    }'
wh '    elseif (`$value2 -gt `$value1) {'
wh '        Write-Host "`$value2" -ForegroundColor Red -NoNewLine'
wh '        Write-Host " is bigger than " -nonewline'
wh '        Write-Host "`$value1" -ForegroundColor Green -NoNewLine'
wh '    }'
wh '    else { return -1 }'
wh "}" -ForegroundColor Cyan
wh $null
"@

function Many-Params ($value1,$value2) {
    if ($value1 -gt $value2) {
        Write-Host "$value1" -ForegroundColor Green -NoNewLine
        Write-Host " is bigger than " -NoNewline
        Write-Host "$value2" -ForegroundColor Red -NoNewLine
    }
    elseif ($value2 -gt $value1){
        Write-Host "$value2" -ForegroundColor Red -NoNewLine
        Write-Host " is bigger than " -NoNewline
        Write-Host "$value1" -ForegroundColor Green -NoNewLine
    }
    else { return -1 }
}

split


#Testing the Function with Parameter
invoke-expression @"
wh "Here we are now going to call the function and pass an Parameter:"
wh "Many-Params " -ForegroundColor Gray -nonewline
wh "4 2" -foregroundcolor red
"@

Many-Params 4 2

pause

invoke-expression @"
wh $null
wh $null
wh "Here is another way to call the function and pass an Parameter:"
wh "Many-Params " -ForegroundColor Gray -NoNewline
wh "-value1 6 -value2 8" -Foregroundcolor red
"@

Many-Params -value1 6 -value2 8


split

invoke-expression @"
wh "Here we are now going the call the function and NOT pass an Parameter:"
wh "Many-Params " -ForegroundColor Gray
"@

Many-Params

pause
