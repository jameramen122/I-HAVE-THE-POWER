<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $aaa = $var1*$var2*$var3*$var4
    return $aaa
}
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    foreach($whatever in $arr) {
        if($whatever[0] -eq $key) { ###VERY IMPORTANT
            return $whatever[9]
            }
        }
    return -1
}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
 $num = 0
 $high = 0
 while ($num -ne -1){
    [int]$num = read-host -prompt "put in a positive number"
    if ($num -gt $high){
        $high = $num
    }
}
return $high

}
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
return (Get-Content $filename)[$whichline]
}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
get-childitem -path $path | Sort-Object -Property Name 
}
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
return $sum
}
function q7 {
	<# Return only those commands whose noun is process #>
return get-command -noun process
}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
return "PowerShell is $adjective"
}
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
    return $addr -as [IPaddress] -as [Bool]

<#if (($addr -le 256) -and ($addr -gt 0)) {
  return $True
} else {
  return $False 
}
#return $addr#>
}
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
 
    return (Get-FileHash $filepath).hash -ne $lasthash


    #$filehash = get-FileHash $filepath | select-object -ExpandProperty Hash
    
    <#if ($lasthash -eq $filehash) {
        return $False
    else { 
        return $True
    }
}#>



}
