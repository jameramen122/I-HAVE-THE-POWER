#4_Functions_with_Default_Parameter_Values

New-Alias -Name wh -Value Write-Host

Function Pause {
   $Message = "Press any key to continue..."
   # Check if running in PowerShell ISE
   
   if ($psISE) {
      # "ReadKey" not supported in PowerShell ISE.
      # Show MessageBox UI
      $Shell = New-Object -ComObject "WScript.Shell"
      $Button = $Shell.Popup("Click 'OK' to continue.", 0, "$null", 0)
      Return
   }
 
   $Ignore =
      16,  # Shift (left or right)
      17,  # Ctrl (left or right)
      18,  # Alt (left or right)
      20,  # Caps lock
      91,  # Windows key (left)
      92,  # Windows key (right)
      93,  # Menu key
      144, # Num lock
      145, # Scroll lock
      166, # Back
      167, # Forward
      168, # Refresh
      169, # Stop
      170, # Search
      171, # Favorites
      172, # Start/Home
      173, # Mute
      174, # Volume Down
      175, # Volume Up
      176, # Next Track
      177, # Previous Track
      178, # Stop Media
      179, # Play
      180, # Mail
      181, # Select Media
      182, # Application 1
      183  # Application 2
 
   #Write-Host -NoNewline $Message
   While ($KeyInfo.VirtualKeyCode -Eq $Null -Or $Ignore -Contains $KeyInfo.VirtualKeyCode) {
      $KeyInfo = $Host.UI.RawUI.ReadKey("NoEcho, IncludeKeyDown")
   }
}

Function line {
wh $null
wh '-------------------------------------------------------------------||'
wh $null
}

Function Split {
pause | Out-Null
line
}
Clear-Host

invoke-expression @"
wh $null
wh "To declare/create a function that contains Default Values, heres the syntax:"
wh "function" -ForegroundColor Green -NoNewline
wh " <function name> " -ForegroundColor Gray -NoNewline
wh "{" -ForegroundColor Cyan
wh "    param(" -ForegroundColor Cyan
wh '      `$Parameter1=`''<Default Value>`'',`$Parameter2=`''<Default Value>`''' -ForegroundColor Red
wh "    )"   -ForegroundColor Cyan
wh '     <function code>'
wh "}" -ForegroundColor Cyan
wh $null
wh "Whenever we assign a default value to a Parameter, if the parameter is never given when the function
gets called, then the default value gets assigned. However, if you do provide an argument to the parameter,
then the parameter gets overwritten by that argument's value"
"@

split

invoke-expression @"
wh $null
wh "Here's a function whose Parameters contains Default Values:"
wh "function" -ForegroundColor Green -NoNewline
wh " Default-Params " -ForegroundColor Gray -NoNewline
wh "{" -ForegroundColor Cyan
wh "    param(" -ForegroundColor Cyan
wh '      `$Parameter1=`''90`'',`$Parameter2=`''65535`''' -ForegroundColor Red
wh "    )"   -ForegroundColor Cyan
wh '       `"The Parameters passed are `$Parameter1`' -NoNewLine
wh ' and `$Parameter2`"'
wh "}" -ForegroundColor Cyan
"@

function Default-Params {
    param(
        $Parameter1='90',$Parameter2='65535'
    )
    "The Parameters passed are $Parameter1 and $Parameter2"
}

split

#Testing the Function with Default Parameters
invoke-expression @"
wh "Here we are now going to call the function without providing a Parameter:"
wh "Default-Params " -ForegroundColor Gray
"@

Default-Params

split

invoke-expression @"
wh "And here we are providing a Parameters to the function:"
wh "Default-Params " -ForegroundColor Gray -NoNewLine
wh "3389 445" -foregroundcolor red
"@

Default-Params 3389 445

pause
