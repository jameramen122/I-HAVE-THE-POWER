#7_Advance_Functions-Help_Messages

New-Alias -Name wh -Value Write-Host

Function Pause {
   $Message = "Press any key to continue..."
   # Check if running in PowerShell ISE
   
   if ($psISE) {
      # "ReadKey" not supported in PowerShell ISE.
      # Show MessageBox UI
      $Shell = New-Object -ComObject "WScript.Shell"
      $Button = $Shell.Popup("Click 'OK' to continue.", 0, "$null", 0)
      Return
   }
 
   $Ignore =
      16,  # Shift (left or right)
      17,  # Ctrl (left or right)
      18,  # Alt (left or right)
      20,  # Caps lock
      91,  # Windows key (left)
      92,  # Windows key (right)
      93,  # Menu key
      144, # Num lock
      145, # Scroll lock
      166, # Back
      167, # Forward
      168, # Refresh
      169, # Stop
      170, # Search
      171, # Favorites
      172, # Start/Home
      173, # Mute
      174, # Volume Down
      175, # Volume Up
      176, # Next Track
      177, # Previous Track
      178, # Stop Media
      179, # Play
      180, # Mail
      181, # Select Media
      182, # Application 1
      183  # Application 2
 
   #Write-Host -NoNewline $Message
   While ($KeyInfo.VirtualKeyCode -Eq $Null -Or $Ignore -Contains $KeyInfo.VirtualKeyCode) {
      $KeyInfo = $Host.UI.RawUI.ReadKey("NoEcho, IncludeKeyDown")
   }
}

Function line {
wh $null
wh '-------------------------------------------------------------------||'
wh $null
}

Function Split {
pause | Out-Null
line
}
Clear-Host

#Syntax to create a function with a Parameter Help Message
invoke-expression @"
wh $null
wh "To declare/create a function that contains a Mandatory Parameter, heres the syntax:"
wh "function" -ForegroundColor Green -NoNewline
wh " <function name> " -ForegroundColor Gray -NoNewline
wh "{" -ForegroundColor Cyan
wh "    param(" -ForegroundColor Cyan
wh '        [' -ForegroundColor DarkRed -NoNewLine; wh 'Parameter' -ForegroundColor DarkGray -NoNewLine  ; wh '(' -NoNewLine ; wh 'Mandatory=`$true' -ForegroundColor Red -NoNewLine ; wh ',' -NoNewLine ; wh 'HelpMessage=<message>' -ForegroundColor Green -NoNewLine ; wh ')' -NoNewLine ; wh ']' -ForegroundColor DarkRed 
wh '                `# The `'HelpMessage=<message>`' will display the message once the user types "!?" when requesting the mandatory parameter'
wh '        `$param' -Foregroundcolor Red
wh '    )' -ForegroundColor Cyan
wh $null
wh '    <function code goes here>'
wh $null
wh '}'
"@

split

#Creating a function with a Parameter Help Message
invoke-expression @"
wh 'Now heres a function that has a Mandatory Parameter'
wh $null
wh "function" -ForegroundColor Green -NoNewline
wh " Help-Params " -ForegroundColor Gray -NoNewline
wh "{" -ForegroundColor Cyan
wh "    param(" -ForegroundColor Cyan
wh '        [' -ForegroundColor DarkRed -NoNewLine; wh 'Parameter' -ForegroundColor DarkGray -NoNewLine  ; wh '(' -NoNewLine ; wh 'Mandatory=`$true,' -ForegroundColor Red -NoNewLine ;  wh 'HelpMessage="Enter an Integer"' -Foregroundcolor Green -NoNewLine ; wh ')' -NoNewLine ;wh ']' -ForegroundColor DarkRed 
wh '        `[int]`$param' -Foregroundcolor Red
wh '    )' -ForegroundColor Cyan
wh $null
wh '    "The argument ```"`$param```" was mandatory for the parameter"'
wh $null
wh '}'
wh $null
"@

function Help-Params {
    param (
        [Parameter(Mandatory=$true, HelpMessage='Enter an Integer')]
                    # The 'HelpMessage='<message>' will display the message once the user types '!?' when requesting the mandatory parameter
        [Int]$param
    )

    "The argument `"$param`" was mandatory for the parameter"

}

split

#Calling the Help-Params Function
Invoke-Expression @"
wh 'Now we are going to call the Function Help-Params.'
wh 'However we are not going to provide an argument.' 
wh $null
wh 'Help-Params' -foregroundcolor green
sleep 1
wh 'cmdlet Help-Params at command pipeline position 1'
wh 'Supply values for the following parameters:'
wh '(Type !? for Help.)'
wh 'param: ' -nonewline ; pause ; wh '!' -Nonewline ; sleep -milliseconds 250 ; wh '?' -NoNewline; pause
wh $null
wh 'Enter an Integer'
wh 'param: ' -NoNewLine ; pause ; wh '2' -NoNewLine; pause
wh $null
wh 'The argument `"2`" was mandatory for the parameter'
wh $null
wh '`#`#`# What happened??'
wh $null
"@

pause
