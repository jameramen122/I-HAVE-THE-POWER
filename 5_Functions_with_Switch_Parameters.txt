#5_Functions_with_Switch_Parameters

New-Alias -Name wh -Value Write-Host

Function Pause {
   $Message = "Press any key to continue..."
   # Check if running in PowerShell ISE
   
   if ($psISE) {
      # "ReadKey" not supported in PowerShell ISE.
      # Show MessageBox UI
      $Shell = New-Object -ComObject "WScript.Shell"
      $Button = $Shell.Popup("Click 'OK' to continue.", 0, "$null", 0)
      Return
   }
 
   $Ignore =
      16,  # Shift (left or right)
      17,  # Ctrl (left or right)
      18,  # Alt (left or right)
      20,  # Caps lock
      91,  # Windows key (left)
      92,  # Windows key (right)
      93,  # Menu key
      144, # Num lock
      145, # Scroll lock
      166, # Back
      167, # Forward
      168, # Refresh
      169, # Stop
      170, # Search
      171, # Favorites
      172, # Start/Home
      173, # Mute
      174, # Volume Down
      175, # Volume Up
      176, # Next Track
      177, # Previous Track
      178, # Stop Media
      179, # Play
      180, # Mail
      181, # Select Media
      182, # Application 1
      183  # Application 2
 
   #Write-Host -NoNewline $Message
   While ($KeyInfo.VirtualKeyCode -Eq $Null -Or $Ignore -Contains $KeyInfo.VirtualKeyCode) {
      $KeyInfo = $Host.UI.RawUI.ReadKey("NoEcho, IncludeKeyDown")
   }
}

Function line {
wh $null
wh '-------------------------------------------------------------------||'
wh $null
}

Function Split {
pause | Out-Null
line
}
Clear-Host

#Function with Switch Parameter Syntax
invoke-expression @"
wh $null
wh "To declare/create a function that contains Switch Parameter, heres the syntax:"
wh "function" -ForegroundColor Green -NoNewline
wh " <function name> " -ForegroundColor Gray -NoNewline
wh "{" -ForegroundColor Cyan
wh "    param(" -ForegroundColor Cyan
wh '      [Switch]' -ForegroundColor Red
wh '      `$SwitchParam' -ForegroundColor Red
wh "    )"   -ForegroundColor Cyan
wh '     <function code>'
wh "}" -ForegroundColor Cyan
wh $null
wh "Note: A Switch Parameter operates based off Boolean Logic."
wh "      -Either the switch is active or its off "
"@

split

#Creating a Function with a Switch Parameter
invoke-expression @"
wh $null
wh "Heres a function that contains Switch Parameter:"
wh "function" -ForegroundColor Green -NoNewline
wh " Nintendo-Switch " -ForegroundColor Gray -NoNewline
wh "{" -ForegroundColor Cyan
wh "    param(" -ForegroundColor Cyan
wh '      [Switch]' -ForegroundColor Red
wh '      `$SwitchPro' -ForegroundColor Red
wh "    )"   -ForegroundColor Cyan
wh '    if (`$SwitchPro) {'
wh '        Write-Host "Switch is Activated"'
wh '        Write-Host "SwitchPro research initiated"'
wh '    }'
wh '    else {'
wh '        Write-Host "Switch is off"'
wh '        Write-Host "SwitchPro never coming"'
wh '    }'
wh "}" -ForegroundColor Cyan
wh $null
"@

function Nintendo-Switch {
    param(
        [Switch]
        $SwitchPro
    )

    if ($SwitchPro) {
        'Switch is Activated'
        'SwitchPro research initiated'
    }
    else {
        'Switch is off'
        'SwitchPro never coming'
    }
}

split

#Function with a Switch Parameter Demos

Invoke-Expression @"
wh "Here we are now calling the function without the Switch Parameter being selected:"
wh "Nintendo-Switch " -ForegroundColor Gray
"@

Nintendo-Switch

split

Invoke-Expression @"
wh "Here we are now calling the function without the Switch Parameter being selected:"
wh "Nintendo-Switch " -ForegroundColor Gray -NoNewLine
wh "-SwitchPro" -ForegroundColor Red
"@

Nintendo-Switch -SwitchPro

pause


